<VWS_FUNCTION (void*)SendWebMetaStr();>
<VWS_FUNCTION (void*)SendWebCssStr();>
	<title>Routing Configuration </title>
    	<SCRIPT>
        /*function _checkIput_fomartIP(ip)
        {
        return (ip+256).toString(2).substring(1);
        }
        */
        function addClick() {
            if (document.route.destNet.value == "") {
                alert("Enter Destination Network ID !");
                document.route.destNet.focus();
                return false;
            }

            if (validateKey(document.route.destNet.value) == 0) {
                alert("Invalid Destination value.");
                document.route.destNet.focus();
                return false;
            }
            var str = document.route.destNet.value;
            var count = 0;
            for (var i = 0; i < str.length; i++) {
                if (str.charAt(i) == '.') {
                    count++;
                }
            }
            if (count != 3) {
                alert("Invalid Destination value.");
                document.route.destNet.focus();
                return false;
            }
            if (!checkDigitRange(document.route.destNet.value, 1, 0, 255)) {
                alert('Invalid Destination range in 1st digit. It should be 0-255.');
                document.route.destNet.focus();
                return false;
            }
            if (!checkDigitRange(document.route.destNet.value, 2, 0, 255)) {
                alert('Invalid Destination range in 2nd digit. It should be 0-255.');
                document.route.destNet.focus();
                return false;
            }
            if (!checkDigitRange(document.route.destNet.value, 3, 0, 255)) {
                alert('Invalid Destination range in 3rd digit. It should be 0-255.');
                document.route.destNet.focus();
                return false;
            }
            if (!checkDigitRange(document.route.destNet.value, 4, 0, 254)) {
                alert('Invalid Destination range in 4th digit. It should be 0-254.');
                document.route.destNet.focus();
                return false;
            }

            if (!checkMask(document.route.subMask)) {
                return false;
            }
            if (document.route.subMask.value == "") {
                alert("Enter Subnet Mask !");
                document.route.subMask.focus();
                return false;
            }

            ip = document.route.destNet.value;
            ip1 = getDigit(ip, 1);
            ip2 = getDigit(ip, 2);
            ip3 = getDigit(ip, 3);
            ip4 = getDigit(ip, 4);
            /*var ipbin = _checkIput_fomartIP(ip1) + _checkIput_fomartIP(ip2) + _checkIput_fomartIP(ip3) +
            _checkIput_fomartIP(ip4); */
            /* var ipbin = ip1<<24 + ip2<<16 + ip3<<8 + ip4; */
            mask = document.route.subMask.value;
            mask1 = getDigit(mask, 1);
            mask2 = getDigit(mask, 2);
            mask3 = getDigit(mask, 3);
            mask4 = getDigit(mask, 4);
            if (((ip1 & mask1) != ip1) ||
		((ip2 & mask2) != ip2) ||
		((ip3 & mask3) != ip3) ||
		((ip4 & mask4) != ip4)) {
                alert("netmask doesn't match route address");
                return false;
            }
            /* var maskbin = _checkIput_fomartIP(mask1) + _checkIput_fomartIP(mask2) +
            _checkIput_fomartIP(mask3) + _checkIput_fomartIP(mask4); */
            /* var maskbin = mask1<<24 + mask2<<16 + mask3<<8 + mask4; 
            if( (ipbin & ~maskbin == ~maskbin) || (ip & ~mask == 0)
            {
            alert(host should not be all zero and one!);
            }
            */
            /*
            var index=0;
            for(index=0; index < maskbin.length; index++) {
            if(maskbin.charAt(index) == '0') break;
            }
            var ones = 0;
            var zeros = 0;
            for(var j=index; j<ipbin.length; j++) {
            if(ipbin.charAt(j) == '0')
            zeros +=1;
            else
            ones +=1;
            }
            if(ones == (ipbin.length - index) ) {
            alert("host should not be all one. ");
            return false;
            }
            if(zeros == (ipbin.length - index)) {
            alert("host should not be all zero. ");
            return false;
            }
            */
            /*if (document.route.nextHop.value=="") {
            alert("Enter Next Hop IP !");
            document.route.nextHop.focus();
            return false;
            }*/

            if (document.route.nextHop.value != "") {
                if (validateKey(document.route.nextHop.value) == 0) {
                    alert("Invalid Next Hop value.");
                    document.route.nextHop.focus();
                    return false;
                }
                var str2 = document.route.nextHop.value;
                var count2 = 0;
                for (i = 0; i < str2.length; i++) {
                    if (str2.charAt(i) == '.') {
                        count2++;
                    }
                }
                if (count2 != 3) {
                    alert("Invalid Next Hop value.");
                    document.route.nextHop.focus();
                    return false;
                }

                if (!checkDigitRange(document.route.nextHop.value, 1, 0, 255)) {
                    alert('Invalid Next Hop range in 1st digit. It should be 0-255.');
                    document.route.nextHop.focus();
                    return false;
                }
                if (!checkDigitRange(document.route.nextHop.value, 2, 0, 255)) {
                    alert('Invalid Next Hop range in 2nd digit. It should be 0-255.');
                    document.route.nextHop.focus();
                    return false;
                }
                if (!checkDigitRange(document.route.nextHop.value, 3, 0, 255)) {
                    alert('Invalid Next Hop range in 3rd digit. It should be 0-255.');
                    document.route.nextHop.focus();
                    return false;
                }
                if (!checkDigitRange(document.route.nextHop.value, 4, 1, 254)) {
                    alert('Invalid Next Hop range in 4th digit. It should be 1-254.');
                    document.route.nextHop.focus();
                    return false;
                }
            }
            metric_digit = parseInt(document.route.metric.value, 10);
            if (document.route.metric.value == "" || (metric_digit > 255 || metric_digit < 1)) {
                alert("Invalid metric. It should be 1-255.");
                document.route.metric.focus();
                return false;
            }

            return true;
        }

        function routeClick(url) {
            var wide = 600;
            var high = 400;
            if (document.all)
                var xMax = screen.width, yMax = screen.height;
            else if (document.layers)
                var xMax = window.outerWidth, yMax = window.outerHeight;
            else
                var xMax = 640, yMax = 480;
            var xOffset = (xMax - wide) / 2;
            var yOffset = (yMax - high) / 3;

            var settings = 'width=' + wide + ',height=' + high + ',screenX=' + xOffset + ',screenY=' + yOffset + ',top=' + yOffset + ',left=' + xOffset + ', resizable=yes, toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes';

            window.open(url, 'RouteTbl', settings);
        }
        function postRouting(state, destip, submask, nextip, cost, itf) {
            if (state == 1)
                document.route.enable.checked = true;
            else
                document.route.enable.checked = false;
            document.route.destNet.value = destip;
            document.route.subMask.value = submask;
            document.route.nextHop.value = nextip;
            document.route.metric.value = cost;
            document.route.interface.value = itf;
        }

        function delRuleCheck() {
            if (document.route.select.length) {
                for (i = 0; i < document.route.select.length; i++) {
                    if (document.route.select[i].checked)
                        return deleteClick();
                }
            } else {
                if (document.route.select.checked)
                    return deleteClick();
            }

            alert("please select an entry to delete!");
            return false;
        }

        function updateClick() {
            var sel = 0;

            if (document.route.select.length) {
                for (i = 0; i < document.route.select.length; i++) {
                    if (document.route.select[i].checked)
                        sel = 1;
                }
            } else {
                if (document.route.select.checked)
                    sel = 1;
            }

            if (!sel) {
                alert("please select an entry to update!");
                return false;
            }

            return (addClick());
        }
    </SCRIPT>
</head>
<body>
    <form action="form2Routing.cgi" method=POST name="route">
    <div class="intro_main ">
        <p class="intro_title">Routing Configuration</p>
        <p class="intro_content">This page is used to configure the routing information. Here you can add/delete IP routes. </p>
    </div>
    <div class="data_common data_common_notitle">
        <table>
            <tr>
                <th width="30%">Enable:</th>
                <td><input type="checkbox" name="enable" checked></td>
            </tr>
            <tr>
                <th>Destination:</th>
                <td><input type="text" maxlength="15" size="15" name="destNet"></td>
            </tr>
            <tr>
                <th>Subnet Mask:</th>
                <td><input type="text" maxlength="15" size="15" name="subMask"></td>
            </tr>
            <tr>
                <th>Next Hop:</th>
                <td><input type="text" maxlength="15" size="15" name="nextHop"></td>
            </tr>
            <tr>
                <th>Metric:</th>
                <td><input type="text" maxlength="5" size="5" value="1" name="metric"></td>
            </tr>
            <tr>
                <th>Interface:</th>
                <td>
                    <VWS_SCREEN (char*)xscrnRoutingIf[];>
                </td>
            </tr>

        </table>
    </div>

    <div class="btn_ctl">
        <input class="link_bg" type="submit" name="addRoute" onClick="return addClick()" value="Add Route"></a>
        <input class="link_bg" type="submit" name="updateRoute" onClick="return updateClick()" value="Update">
        <input class="link_bg" type="submit" name="delRoute" onClick="return delRuleCheck()" value="Delete Selected">
        <input class="link_bg" type="button" name="showRoute" onClick="routeClick('routetbl.htm')" value="Show Routes">
    </div>

    <div class="column">
        <div class="column_title">
            <div class="column_title_left"></div>
            <p>Static Route Table:</p>
            <div class="column_title_right"></div>
        </div>
        <div class="data_common data_vertical">
            <table>
                <tr>
                    <th>Select</th>
                    <th>State</th>
                    <th>Destination</th>
                    <th>Subnet Mask</th>
                    <th>NextHop</th>
                    <th>Metric</th>
                    <th>Itf</th>
                </tr>
                <VWS_FUNCTION (void*)showRoutingCfgFunc();>
            </table>
        </div>
    </div>
    <input type="hidden" NAME="submit.htm?routing.htm" value="Send">
    </form>
</body>
</html>